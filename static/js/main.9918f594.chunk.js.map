{"version":3,"sources":["utils.js","components/WelcomeDialog.jsx","components/Header.jsx","components/BottomNavigation.jsx","components/Footer.jsx","components/ItemList.jsx","components/ActivityAccordion.jsx","components/ActivityList.jsx","components/SearchBar.jsx","components/SaveChainDialog.jsx","components/Alert.jsx","pages/CreateChains.jsx","pages/Settings.jsx","components/ChainActivityItemListSelect.jsx","components/ChainActivityItemListEdit.jsx","components/ChainAccordion.jsx","components/MovableItemList.jsx","pages/Chains.jsx","App.js","index.js"],"names":["getCachedActivities","cache","window","localStorage","getItem","JSON","parse","presets","getCachedChains","Object","entries","colors","mainColor","chainAccordionColor","generateColor","activityName","light","sum","i","length","charCodeAt","generateChainColor","activities","totalLength","reduce","count","activity","items","current","intervals","map","temp","name","colorItems","join","isTouchDevice","alreadyExists","value","array","item","toLowerCase","includes","trim","isValidName","useStyles","makeStyles","theme","root","display","flexDirection","justify","width","imageDiv","textAlign","margin","marginTop","image","height","title","button","marginBottom","info","Transition","React","forwardRef","props","ref","Slide","direction","timeout","enter","exit","WelcomeDialog","forceOpen","close","classes","useState","showOrNot","console","log","getCachedWelcomeDialogValue","open","setOpen","handleClose","setItem","className","Dialog","fullScreen","onClose","TransitionComponent","Typography","variant","src","Button","onClick","header","justifyContent","appbar","position","background","color","alignItems","marginRight","helpIcon","marginLeft","Header","showHelp","setShowHelp","AppBar","Toolbar","IconButton","rootTouch","LabelBottomNavigation","location","hash","setValue","BottomNavigation","onChange","event","newValue","BottomNavigationAction","component","NavLink","to","label","icon","footer","appBar","top","bottom","Footer","iconButton","float","favoriteIcon","Item","onDelete","TableRow","tabIndex","TableCell","Delete","ActivityContent","setActivities","newItem","setNewItem","newItemAlreadyExists","deleteItem","stopPropagation","newActivities","Table","TableBody","colSpan","onSubmit","preventDefault","packs","TextField","fullWidth","placeholder","error","helperText","target","heading","flexShrink","alignSelf","ActivityAccordion","selected","setSelected","backgroundColor","lighterBgColor","getItems","sort","a","b","Accordion","style","AccordionSummary","expandIcon","ExpandMore","pinned","Favorite","AccordionDetails","ItemList","text","EmptyListText","ActivityList","selectedActivities","selectedItems","setSelectedItems","filter","ak","bk","av","key","spacing","leftMostIcon","pinIcon","SearchBar","setSelectedActivities","activityNames","activitiesInChains","chain","flat","createActivity","Autocomplete","multiple","id","options","newestItem","freeSolo","ListboxProps","renderOption","option","isDeletable","toggleFavorite","FavoriteBorder","Tooltip","deleteActivity","disabled","renderTags","getTagProps","index","Chip","renderInput","params","SaveChainDialog","chainActivities","clear","showSuccess","newChainName","setNewChainName","chains","chainExists","confirm","values","stringify","aria-labelledby","DialogTitle","DialogContent","DialogContentText","autoFocus","type","DialogActions","CreateAlert","message","isError","hideAlert","setTimeout","Alert","severity","saveChain","CreateChains","showAlert","setShowAlert","useEffect","toggleShowAlert","paddingBottom","buttons","ResetConfirmationDialog","action","cancel","Settings","dialogOpen","setDialogOpen","Container","ChainActivityItemListSelect","chainName","updateSelectedItems","isSelected","EmptyRow","hover","newSelectedItems","push","handleClick","role","aria-checked","padding","Checkbox","checked","flexBasis","secondaryHeading","addItemForm","ChainActivityItemListEdit","addItem","itemName","Set","keys","onInputChange","e","bar","barPrimary","accordionDetails","paddingLeft","paddingRight","addActivityForm","ChainAccordion","handleDelete","chainsInEdit","setChainsInEdit","deleteActivityInChain","addActivityToChain","newActivity","setNewActivity","isOpen","newActivityAlreadyExists","chainInEdit","isAllItemsSelected","every","toggleChainEditMode","newChainsInEdit","concat","addActivity","allItems","Save","Edit","LinearProgress","barColorPrimary","noOfItems","progress","size","lightBgColor","accumulator","activityItemNames","forEach","MovableItem","contentItem","moveItem","dragAllowed","useRef","useDrop","accept","dragIndex","hoverIndex","drop","useDrag","collect","monitor","isDragging","canDrag","drag","opacity","MovableItemList","orderBar","buildChainAccordions","deleteChain","data","Chains","setChains","setDragAllowed","fromEntries","toggleDragAllowed","ToggleOn","fontSize","ToggleOff","newChains","deletedActivity","draggedChain","update","$splice","backendForDND","TouchBackend","HTML5Backend","App","DndProvider","backend","exact","path","createMuiTheme","overrides","MuiTableCell","borderBottom","MuiIconButton","typography","fontFamily","palette","secondary","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.9918f594.chunk.js","sourcesContent":["import presets from './activities.json'\n\nconst getCachedActivities = () => {\n  const cache = window.localStorage.getItem('cachedActivities')\n\n  return cache\n    ? JSON.parse(cache)\n    : presets\n}\n\nconst getCachedChains = () => {\n  const cache = window.localStorage.getItem('cachedChains')\n\n  return cache\n    ? Object.entries(JSON.parse(cache))\n    : [] // Object.entries(testChains)\n}\n\nconst colors = [\n  // Index 0 -> normal, 1 -> light\n  ['#FF7B7B', '#FFA9A9'],  // RED\n  ['#FFF27B', '#FFF7A9'],  // YELLOW\n  ['#7BCFFF', '#A9E0FF'],  // LIGHT BLUE\n  ['#FFC27B', '#FFD7A9'],  // ORANGE\n  ['#7BFFBF', '#A9FFD5'],  // LIGHT GREEN\n  ['#7B80FF', '#A9ACFF'],  // INDIGO\n  ['#EC7BFF', '#F3A9FF'],  // PURPLE\n  ['#85FF7B', '#B0FFA9'],  // LIGHT GREEN\n  ['#49CCBC', '#89DED3'],  // DARK GREEN\n  ['#FF7BD2', '#FFA9E2'],  // PINK\n  ['#6449CC', '#9A89DE']   // DARK INDIGO\n]\n\nconst mainColor = '#62D8FE'\nconst mainColorLight = '#99E6FE'\n\nconst chainAccordionColor = '#EEEEEE'\nconst chainAccordionProgressBarColor = '#7BFFBF'\n\nconst generateColor = (activityName, light) => {\n  let sum = 0\n  for (let i = 0; i < activityName.length; i++) {\n    sum += activityName.charCodeAt(i)\n  }\n  return colors[sum % colors.length][light ? 1 : 0]\n}\n\nconst generateChainColor = (activities) => {\n\n  const totalLength = activities.reduce((count, activity) => count + activity.items.length, 0)\n  let current = 0\n  const intervals = activities.map(activity => {\n    const temp = current\n    current += activity.items.length\n    return [(temp / totalLength) * 100, ((temp + activity.items.length) / totalLength) * 100]\n  })\n\n  const colors = activities\n    .map(activity => [generateColor(activity.name), activity.items.length])\n    .map((colorItems, i) => `${colorItems[0]} ${intervals[i][0]}% ${intervals[i][1]}%`)\n    .join()\n  \n  return `linear-gradient(to right, ${colors}`\n\n}\n\nconst isTouchDevice = () => {\n  if ('ontouchstart' in window) {\n    return true\n  }\n  return false\n}\n\nconst alreadyExists = (value, array) => \n  value && array.map(item => item.toLowerCase()).includes(value.trim().toLowerCase())\n\nconst isValidName = (name) => name && name.trim()\n\nexport {\n  getCachedActivities,\n  getCachedChains,\n  generateColor,\n  generateChainColor,\n  isTouchDevice,\n  alreadyExists,\n  isValidName,\n  chainAccordionColor,\n  chainAccordionProgressBarColor,\n  mainColor,\n  mainColorLight\n}","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport Typography from '@material-ui/core/Typography'\nimport Slide from '@material-ui/core/Slide'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justify: 'center',\n    width: '100%'\n  },\n  imageDiv: {\n    textAlign: 'center',\n    margin: 50,\n    marginTop: 100\n  },\n  image: {\n    width: '10%',\n    height: 'auto',\n    margin: 20\n  },\n  title: {\n    textAlign: 'center'\n  },\n  button: {\n    textAlign: 'center',\n    marginBottom: 100\n  },\n  info: {\n    margin: 20\n  }\n}))\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} timeout={{ enter: 0, exit: 1000 }}/>\n})\n\nconst getCachedWelcomeDialogValue = () => {\n  const showOrNot = window.localStorage.getItem('cachedWelcomeDialogValue')\n  console.log(showOrNot)\n  if (!showOrNot || showOrNot === 'true') return true\n  else return false\n}\n\nconst  WelcomeDialog = ({ forceOpen, close }) => {\n  const classes = useStyles()\n  const [open, setOpen] = React.useState( forceOpen ? true : getCachedWelcomeDialogValue() )\n\n  const handleClose = () => {\n    setOpen(false)\n    window.localStorage.setItem('cachedWelcomeDialogValue', 'false')\n\n    if (close) close()\n  }\n\n  return (\n    <div className={classes.root} >\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <div className={classes.imageDiv}>\n          <Typography className={classes.title} variant='h2'>\n            List\n          </Typography>\n          <img className={classes.image} src='logo.png' />\n          <Typography className={classes.title} variant='h2'>\n            Chainer\n          </Typography>\n        </div>\n        <div className={classes.info}>\n          <h3>Heya! 👋</h3>\n          <h4>Welcome to ListChainer - your own little pocket assistant that keeps track of the items you need in your daily activities.</h4>\n          <h4>To get you started, here’s a mini glossary of some useful Listchainer lingo 💬</h4>\n          <p>\n              🤸‍♂️ An Activity simply means the stuff you do every day - be it studying, skydiving,\n              knitting, swimming, reading, going to the movies, stargazing… You name it! In ListChainer,\n              you can define the items you need to pack along for your activity. We’ve added a bunch of\n              ready-made editable lists for you, but you could and should create your own activities in\n              the “Create a New Chain” -section. You can later on edit the items both in “Create a New Chain”\n              as well as “My Chains”.\n          </p>\n          <p>\n              ✔️ Exercise 1: Create a new Activity called “Clubbing”. You can for instance add the following items:\n              Wallet, ID Card, Bottle of “water”, Party outfit and Dance skills. Let’s go!\n          </p>\n          <br/>\n          <p>\n              ⛓ A Chain is a collection of your daily activities. Say, for example, during your typical day you’d go to work,\n              hit the gym and finish off the day at the pub. Your chain “My Typical Day 1” would then be Work → Gym → Pub.\n              You can create your own chain in the “Create a New Chain” -section. You can see a collection of your own chains\n              under “My Chains” -section.\n          </p>\n          <p>\n              ✔️ Exercise 2: Create your first chain! To do this, in the “Create a New Chain” -section, just start typing the\n              Activities you wish to include (and no worries, you may edit the items of each Activity on the go). How about a chain\n              called “Off Day” with the Activities “Climbing”, “Grocery shopping”, “Movies” and “Clubbing”?\n          </p>\n          <br/>\n          <p>\n              That’s it - thanks for your attention. You may now play around with the app to get in grips with all the functionalities\n              and customize your own ListChainer experience. You can revisit this tutorial any time under “Settings”. ✨\n          </p>\n          <p>\n              💌 We’re still in an early phase of production. If you wanna reach out to us in person to ask us a question,\n              report a bug, request functionalities or just say hello to our wonderful team, please don’t hesitate to contact us at:\n              listchainerteam@gmail.com\n          </p>\n\n          <h2>Happy listing!</h2>\n        </div>\n        <div className={classes.button}>\n          <Button onClick={handleClose} variant=\"contained\" >\n            Start chaining your activities\n          </Button>\n        </div>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default WelcomeDialog","import React, { useState } from 'react'\nimport { Typography, AppBar, Toolbar, IconButton } from '@material-ui/core'\nimport HelpIcon from '@material-ui/icons/Help'\nimport { makeStyles } from '@material-ui/styles'\nimport { mainColor } from '../utils'\nimport WelcomeDialog from './WelcomeDialog'\n\nconst useStyles = makeStyles(() => ({\n  header: {\n    margin: '80px',\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  appbar: {\n    position: 'fixed',\n    background: mainColor,\n    color: 'BLACK',\n    height: '64px',\n    alignItems: 'center'\n  },\n  title: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  image: {\n    marginRight: '20px'\n  },\n  helpIcon: {\n    marginLeft: '20px'\n  }\n}))\n\nconst Header = () => {\n  const classes = useStyles()\n  const [showHelp, setShowHelp ] = useState(false)\n\n  return (\n    <div className={classes.header}>\n      <AppBar className={classes.appbar}>\n        <Toolbar>\n          <div className={classes.title}>\n            <img className={classes.image} src='logo.png' height='64px' />\n            <Typography variant=\"h4\">\n              ListChainer\n            </Typography>\n          </div>\n          <div className={classes.helpIcon}>\n            <IconButton onClick={() => setShowHelp(true)} >\n              <HelpIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {\n        showHelp\n          ? <WelcomeDialog forceOpen={true} close={() => setShowHelp(false)} />\n          : <></>\n      }\n    </div>\n    \n  )\n}\n\n\nexport default Header","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport HomeIcon from '@material-ui/icons/Home'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport CreateChain from '@material-ui/icons/Add'\nimport { isTouchDevice, mainColor } from '../utils'\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: 700,\n    background: mainColor\n  },\n  rootTouch: {\n    width: '100%',\n    background: mainColor\n  }\n})\n\nconst LabelBottomNavigation = () => {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(window.location.hash)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  return (\n    <BottomNavigation value={value} onChange={handleChange} className={ isTouchDevice() ? classes.rootTouch : classes.root }>\n      <BottomNavigationAction component={NavLink} to=\"/\" label=\"Chains\" value=\"#/\" icon={<HomeIcon />} />\n      <BottomNavigationAction component={NavLink} to=\"/create-chains\" label=\"New Chain\" value=\"#/create-chains\" icon={<CreateChain />}/>\n      <BottomNavigationAction component={NavLink} to=\"/settings\" label=\"Settings\" value=\"#/settings\" icon={<SettingsIcon />} />\n    </BottomNavigation>\n  )\n}\n\nexport default LabelBottomNavigation","import React from 'react'\nimport { AppBar, Toolbar } from '@material-ui/core'\nimport BottomNavigation from './BottomNavigation'\nimport { makeStyles } from '@material-ui/styles'\nimport { mainColor } from '../utils'\n\nconst useStyles = makeStyles(() => ({\n  footer: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '100px',\n    \n  },\n  appBar: { \n    top: 'auto', \n    position: 'fixed',\n    bottom: 0,\n    alignItems: 'center',\n    background: mainColor\n  }\n}))\n\nconst Footer = () => {\n  const classes = useStyles()\n  \n  return (\n    <div className={classes.footer}>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <BottomNavigation />\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default Footer","import React, { useState } from 'react'\nimport { \n  IconButton, \n  makeStyles, \n  Table, \n  TableBody, \n  TableCell, \n  TableRow, \n  TextField \n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { alreadyExists, isValidName } from '../utils'\n\nconst useStyles = makeStyles((theme) => ({\n  iconButton: {\n    float: 'right',\n    marginLeft: 'auto'\n  },\n  favoriteIcon: {\n    marginRight: '10px'\n  }\n}))\n\nconst Item = ({ name, onDelete }) => {\n  const classes = useStyles()\n\n  return (\n    <TableRow tabIndex={-1}>\n      <TableCell>{name}</TableCell>\n      <TableCell>\n        <IconButton className={classes.iconButton} onClick={(event) => onDelete(event, name)}>\n          <Delete />\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nconst ActivityContent = ({ activity, items, activities, setActivities }) => {\n  const [ newItem, setNewItem ] = useState('')\n  const newItemAlreadyExists = alreadyExists(newItem, items.map(item => item.name))\n\n  const addItem = (event) => {\n    event.preventDefault()\n    if (isValidName(newItem) && !newItemAlreadyExists) {\n      const newActivities = { ...activities }\n      newActivities[activity.name].items[newItem.trim()] = { packs: 0 }\n      setActivities(newActivities)\n      setNewItem('')\n    }\n  }\n\n  const deleteItem = (event, name) => {\n    event.stopPropagation()\n    const newActivities = { ...activities }\n    delete newActivities[activity.name].items[name]\n    setActivities(newActivities)\n  }\n\n  return (\n    <Table>\n      <TableBody>\n        {items.map((item, i) => (\n          <Item name={item.name} onDelete={deleteItem} key={i} />\n        ))}\n        <TableRow>\n          <TableCell colSpan={3}>\n            <form onSubmit={addItem}>\n              <TextField\n                fullWidth \n                placeholder='Add a new item...' \n                error={newItemAlreadyExists}\n                value={newItem}\n                helperText={newItemAlreadyExists ? 'Item already exists!' : ''}\n                onChange={(event) => setNewItem(event.target.value)} />\n            </form>\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  )\n}\n\nexport default ActivityContent","import React from 'react'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography\n} from '@material-ui/core'\nimport { ExpandMore, Favorite } from '@material-ui/icons'\nimport { makeStyles } from '@material-ui/styles'\nimport { generateColor } from '../utils'\nimport ItemList from './ItemList'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    flexShrink: 0,\n    alignSelf: 'center',\n    display: 'flex',\n    marginRight: 20\n  },\n  iconButton: {\n    float: 'right',\n  },\n  favoriteIcon: {\n    marginRight: '10px'\n  }\n}))\n\nconst ActivityAccordion = ({ activity, activities, setActivities, selected, setSelected }) => {\n  const classes = useStyles()\n  const backgroundColor = generateColor(activity.name, false)\n  const lighterBgColor  = generateColor(activity.name, true)\n\n  const getItems = (\n    Object.entries(activity.items)\n      .map(([k, v]) => ({\n        name: k,\n        packs: v.packs\n      }))\n      .sort((a, b) => b.name < a.name ? 1 : -1)\n  )\n\n  return (\n    <Accordion style={{ backgroundColor }}>\n      <AccordionSummary expandIcon={<ExpandMore />}>\n        <Typography className={classes.heading}>\n          {activity.pinned && <Favorite className={classes.favoriteIcon} />}\n          {activity.name}\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails style={{ backgroundColor: lighterBgColor }}>\n        <ItemList\n          activity={activity} \n          items={getItems}\n          activities={activities}\n          setActivities={setActivities}\n          selected={selected}\n          setSelected={setSelected}\n        />\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n\nexport default ActivityAccordion","import React from 'react'\nimport {\n  Typography\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport ActivityAccordion from './ActivityAccordion'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: 10\n  },\n  text: {\n    alignSelf: 'center'\n  }\n}))\n\nconst EmptyListText = () => {\n  const classes = useStyles()\n  return (\n    <Typography variant=\"h4\" className={classes.text}>\n      \n    </Typography>\n  )\n}\n\nconst ActivityList = ({ activities, setActivities, selectedActivities, selectedItems, setSelectedItems }) => {\n  const classes = useStyles()\n\n  const filterActivities = () => (\n    Object.entries(activities)\n      .filter(([name, v]) => selectedActivities.includes(name))\n      .sort(([ak, av], [bk , bv]) => ak > bk ? 1 : -1)\n      .sort(([ak, av], [bk , bv]) => bv.pinned - av.pinned)\n      .map(([key, value]) => (\n        {\n          name: key,\n          items: value.items,\n          pinned: value.pinned\n        }\n      ))\n  )\n\n  return (\n    <div className={classes.root}>\n      {\n        !selectedActivities.length\n          ? <EmptyListText />\n          : filterActivities()\n            .map((activity, i) =>\n              <ActivityAccordion \n                activity={activity} \n                activities={activities}\n                setActivities={setActivities}\n                selected={selectedItems} \n                setSelected={setSelectedItems}\n                key={i} \n              />\n            )\n      }\n    </div>\n  )\n}\n\nexport default ActivityList\n\n","/* eslint-disable no-use-before-define */\nimport React from 'react'\nimport Chip from '@material-ui/core/Chip'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport { generateColor, isValidName } from '../utils'\nimport { IconButton, Tooltip } from '@material-ui/core'\nimport { Delete, Favorite, FavoriteBorder } from '@material-ui/icons'\nimport { getCachedChains } from '../utils'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > * + *': {\n      marginTop: theme.spacing(3),\n    },\n  },\n  leftMostIcon: {\n    marginLeft: 'auto'\n  },\n  pinIcon: {\n    marginLeft: 0,\n    marginRight: '5px'\n  }\n}))\n\nconst SearchBar = ({ activities, setActivities, selectedActivities, setSelectedActivities }) => {\n  const classes = useStyles()\n\n  const activityNames = (\n    Object.entries(activities)\n      .sort(([ak, av], [bk , bv]) => ak.toLowerCase() > bk.toLowerCase() ? 1 : -1)\n      .sort(([ak, av], [bk , bv]) => bv.pinned - av.pinned)\n      .map(([key, value]) => key)\n  )\n\n  const activitiesInChains = getCachedChains().map(chain => chain[1].activities).flat()\n\n  const onChange = (event, value) => {\n    const newestItem = value[value.length - 1]\n    const wasAddition = value.length > selectedActivities.length\n    if (wasAddition && isValidName(newestItem) && !activities[newestItem]) {\n      createActivity(newestItem)\n    }\n    setSelectedActivities(value)\n  }\n\n  const createActivity = (name) => {\n    const newActivities = { ...activities }\n    newActivities[name] = {\n      items: {},\n      pinned: true\n    }\n    setActivities(newActivities)\n    console.log('created',name)\n  }\n\n  const deleteActivity = (event, name) => {\n    event.stopPropagation()\n    const newActivities = { ...activities }\n    delete newActivities[name]\n    setActivities(newActivities)\n    setSelectedActivities(selectedActivities.filter(selected => selected !== name))\n  }\n\n  const toggleFavorite = (event, name) => {\n    event.stopPropagation()\n    const newActivities = { ...activities }\n    newActivities[name].pinned = !newActivities[name].pinned\n    setActivities(newActivities)\n  }\n\n  const renderOption = (option) => {\n    const isDeletable = !activitiesInChains.includes(option)\n\n    return (\n      <>\n        {option}\n        <IconButton \n          className={classes.leftMostIcon}\n          onClick={(event) => toggleFavorite(event, option)}>\n          {activities[option].pinned ? <Favorite /> : <FavoriteBorder />}\n        </IconButton>\n        <Tooltip title={isDeletable ? 'Delete' : 'Included in a chain'}>\n          <span>\n            <IconButton \n              onClick={(event) => deleteActivity(event, option)}\n              disabled={!isDeletable}\n            >\n              <Delete />\n            </IconButton>\n          </span>\n        </Tooltip>\n      </>\n    )\n  }\n\n  return (\n    <div className={classes.root}> \n      <Autocomplete\n        multiple\n        id=\"tags-filled\"\n        options={activityNames}\n        value={selectedActivities}\n        onChange={onChange}\n        freeSolo\n        ListboxProps={{ style: { position: 'absolute', backgroundColor: '#fafafa', width: '100%' } }}\n        renderOption={renderOption}\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip \n              variant=\"outlined\" \n              label={option} {...getTagProps({ index })} \n              style={{ backgroundColor: generateColor(option, false) }} \n              key={index}\n            />\n          ))\n        }\n        renderInput={(params) => (\n          <TextField {...params} variant=\"outlined\" label=\"Activities\" placeholder=\"Search or create new activities...\" />\n        )}\n      />\n    </div>\n  )\n}\n\nexport default SearchBar","import React, { useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nconst SaveChainDialog = ({ chainActivities, clear, showSuccess }) => {\n  const [ open, setOpen ] = React.useState(false)\n  const [ newChainName, setNewChainName ] = useState('')\n\n  let chains = window.localStorage.getItem('cachedChains')\n  chains = chains ? JSON.parse(chains) : { }\n\n  const chainExists = () => chains[newChainName] ? true : false\n\n  const saveChain = () => {\n    chains[newChainName] = {\n      activities: Object.values(chainActivities),\n      selectedItems: []\n    }\n    window.localStorage.setItem('cachedChains', JSON.stringify(chains))\n  }\n\n  const handleClose = (confirm) => {\n    if (confirm) {\n      saveChain()\n      clear()\n      showSuccess()\n    }\n    setNewChainName('')\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" onClick={() => setOpen(true)}>\n        Save chain\n      </Button>\n      <Dialog open={open} onClose={() => handleClose(false)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Save chain</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please give name for your new chain\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"newchainname\"\n            label='Chain name'\n            type=\"text\"\n            fullWidth\n            error={chainExists()}\n            helperText={chainExists() ? 'Chain already exists!' : ''}\n            value={newChainName}\n            onChange={(event) => setNewChainName(event.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => handleClose(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button disabled={!newChainName} onClick={() => handleClose(true)} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default SaveChainDialog","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Alert from '@material-ui/lab/Alert'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}))\n\nconst CreateAlert = ({ message, isError, hideAlert }) => {\n  const classes = useStyles()\n\n  setTimeout(hideAlert, 3000)\n\n  return (\n    <div className={classes.root}>\n      {\n        isError\n          ? <Alert severity=\"error\">{ message }</Alert>\n          : <Alert severity=\"success\">{ message }</Alert>\n      }\n    </div>\n  )\n}\n\nexport default CreateAlert","import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport ActivityList from '../components/ActivityList'\nimport SearchBar from '../components/SearchBar'\nimport SaveChainDialog from '../components/SaveChainDialog'\nimport { Button, Tooltip, Typography } from '@material-ui/core'\nimport CreateAlert from '../components/Alert'\nimport { getCachedActivities } from '../utils'\nimport { Help } from '@material-ui/icons'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  saveChain: {\n    marginTop: 10\n  },\n  info: {\n    marginLeft: 10,\n  }\n}))\n\nconst CreateChains = () => {\n  const classes = useStyles()\n  const [ activities, setActivities ] = useState(getCachedActivities())\n  const [ selectedActivities, setSelectedActivities ] = useState([])\n  const [ selectedItems, setSelectedItems ] = useState([])\n  const [ showAlert, setShowAlert ] = useState(false)\n\n  useEffect(() => {\n    window.localStorage.setItem('cachedActivities', JSON.stringify(activities))\n  }, [ activities ])\n\n  const clear = () => {\n    setSelectedActivities([])\n    setSelectedItems([])\n  }\n\n  const toggleShowAlert = () => {\n    setShowAlert(!showAlert)\n  }\n\n  const infoText = \n    `Start typing to get suggestions or create a new activity by typing a name and pressing Enter.\n    You can pin activities to the top of the list by pressing the heart button and delete activities\n    by pressing the trash can button. Note that you can't delete activities that are part of a chain.`\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" style={{ marginBottom: '20px' }}>\n        Create new chain\n        <Tooltip color='secondary' className={classes.info} title={infoText}>\n          <Help />\n        </Tooltip>\n      </Typography>\n      \n      <SearchBar \n        activities={activities} \n        setActivities={setActivities}\n        selectedActivities={selectedActivities} \n        setSelectedActivities={setSelectedActivities}\n      />\n      <ActivityList \n        activities={activities} \n        setActivities={setActivities}\n        selectedActivities={selectedActivities}\n        selectedItems={selectedItems}\n        setSelectedItems={setSelectedItems}\n      />\n      {\n        showAlert\n          ? <CreateAlert message={'Chain saved'} hideAlert={toggleShowAlert} />\n          : <></>\n      }\n      <div className={classes.saveChain}>\n        {\n          !selectedActivities.length\n            ? <Button disabled>Save Chain</Button>\n            : \n            <SaveChainDialog\n              chainActivities={selectedActivities}\n              clear={clear}\n              showSuccess={toggleShowAlert}\n            />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default CreateChains\n\n\n","import React, { useState } from 'react'\nimport { Button, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport Alert from '../components/Alert'\n\nconst useStyles = makeStyles(() => ({\n  title: {\n    paddingBottom: '40px'\n  },\n  buttons: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 20\n  }\n}))\n\nconst ResetConfirmationDialog = ({ open, action, cancel }) => (\n  <Dialog open={open} onClose={cancel}>\n    <DialogTitle>Are you sure?</DialogTitle>\n    <DialogContent>\n      <DialogContentText>\n        This will clear all your changes and load preset activities.\n        Do you want to continue?\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button autoFocus onClick={cancel}>No</Button>\n      <Button onClick={action}>Yes</Button>\n    </DialogActions>\n  </Dialog>\n)\n\nconst Settings = () => {\n  const classes = useStyles()\n  const [ showAlert, setShowAlert ] = useState(false)\n  const [ dialogOpen, setDialogOpen ] = useState(false)\n\n  const resetCache = () => {\n    window.localStorage.clear()\n    setDialogOpen(false)\n    setShowAlert(true)\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h4\" className={classes.title}>\n        Settings\n      </Typography>\n      <Container className={classes.buttons}>\n        <Button variant='contained' onClick={() => setDialogOpen(true)}>\n          Reset all chains and activities\n        </Button>\n      </Container>\n\n      {\n        showAlert\n          ? <Alert message={'Erased all changes'} hideAlert={() => setShowAlert(false)} />\n          : <></>\n      }\n\n      <ResetConfirmationDialog \n        open={dialogOpen} \n        action={resetCache}\n        cancel={() => setDialogOpen(false)}\n      />\n    </div>\n  )\n}\n\nexport default Settings","import React from 'react'\nimport { \n  Checkbox,\n  Table, \n  TableBody, \n  TableCell, \n  TableRow,\n  Typography, \n} from '@material-ui/core'\n\nconst ChainActivityItemListSelect = ({ activity, chainName, selectedItems, updateSelectedItems }) => {\n\n  const isSelected = (name) => selectedItems.includes(name)\n\n  const handleClick = (event, name) => {\n    if (isSelected(name)) {\n      updateSelectedItems(chainName, selectedItems.filter(item => item != name))\n    }\n    else {\n      const newSelectedItems = selectedItems\n      selectedItems.push(name)\n      updateSelectedItems(chainName, newSelectedItems)\n    }\n  }\n\n  const EmptyRow = () => (\n    <TableRow>\n      <TableCell>\n        <Typography>\n          This activity contains no items, edit activity to add them.\n        </Typography>\n      </TableCell>\n    </TableRow>\n  )\n\n  // item[0] means name\n  const buildRow = (item, i) => (\n    <TableRow\n      hover\n      onClick={(event) => handleClick(event, item[0])}\n      role=\"checkbox\"\n      aria-checked={isSelected(item[0])}\n      tabIndex={-1}\n      key={i}\n      selected={isSelected(item[0])}\n    >\n      <TableCell>{item[0]}</TableCell>\n      <TableCell padding=\"checkbox\">\n        <Checkbox\n          checked={isSelected(item[0])}\n        />\n      </TableCell>\n    </TableRow>\n  )\n\n  return (\n    <Table>\n      <TableBody>\n        { \n          activity.items.length\n            ? activity.items.map(buildRow)\n            : <EmptyRow />\n        }\n      </TableBody>\n    </Table>\n  )\n}\n\nexport default ChainActivityItemListSelect","import React, { useState } from 'react'\nimport { \n  IconButton, \n  makeStyles, \n  Table, \n  TableBody, \n  TableCell, \n  TableRow, \n  TextField \n} from '@material-ui/core'\nimport { Delete, Add } from '@material-ui/icons'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { alreadyExists, isValidName } from '../utils'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    flexBasis: '50%',\n    flexShrink: 0,\n    alignSelf: 'center',\n    display: 'flex'\n  },\n  secondaryHeading: {\n    alignSelf: 'center'\n  },\n  iconButton: {\n    float: 'right',\n    marginLeft: 'auto'\n  },\n  addItemForm: {\n    display: 'flex'\n  }\n}))\n\n\nconst ChainActivityItemListEdit = ({ activity, activities, setActivities, selectedItems, updateSelectedItems, chainName }) => {\n  const [ newItem, setNewItem ] = useState('')\n  const classes = useStyles()\n  const newItemAlreadyExists = alreadyExists(newItem, activity.items.map(item => item[0]))\n  const getAllItemNames = () => [...new Set(Object.values(activities).map(activity => Object.keys(activity.items)).flat())].filter(name => name.toLowerCase().includes(newItem.toLowerCase()))\n\n  const addItem = (event) => {\n    event.preventDefault()\n    if (isValidName(newItem) && !newItemAlreadyExists) {\n      const newActivities = { ...activities }\n      newActivities[activity.name].items[newItem.trim()] = { packs: 0 }\n      setActivities(newActivities)\n      setNewItem('')\n    }\n  }\n\n  const deleteItem = (event, itemName) => {\n    event.stopPropagation()\n    const newActivities = { ...activities }\n    delete newActivities[activity.name].items[itemName]\n    setActivities(newActivities)\n\n    if (selectedItems.includes(itemName)) {\n      console.log(selectedItems)\n      console.log(selectedItems.filter(item => item !== itemName))\n      updateSelectedItems(chainName, selectedItems.filter(item => item !== itemName))\n    }\n  }\n\n  const buildRow = (item, i) => (\n    <TableRow\n      hover\n      tabIndex={-1}\n      key={i}\n    >\n      <TableCell>{item[0]}</TableCell>\n      <TableCell>\n        <IconButton className={classes.iconButton} onClick={(event) => deleteItem(event, item[0])}>\n          <Delete />\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  )\n\n  return (\n    <Table>\n      <TableBody>\n        {activity.items.map(buildRow)}\n        <TableRow>\n          <TableCell colSpan={3} >\n            <form onSubmit={addItem} className={classes.addItemForm}>\n              <Autocomplete\n                style={{ width: '95%' }}\n                freeSolo\n                value={newItem}\n                options={getAllItemNames()}\n                onInputChange={(e, value) => setNewItem(value)}\n                ListboxProps={{ style: { position: 'absolute', backgroundColor: '#fafafa', width: '100%' } }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    fullWidth \n                    placeholder='Add a new item...' \n                    error={newItemAlreadyExists}\n                    helperText={newItemAlreadyExists ? 'Item already exists!' : ''} \n                  />\n                )}\n              />\n              <IconButton className={classes.iconButton} onClick={addItem}>\n                <Add />\n              </IconButton>\n            </form> \n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  )\n}\n\nexport default ChainActivityItemListEdit","import React, { useState } from 'react'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Checkbox,\n  IconButton,\n  LinearProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField,\n  Typography\n} from '@material-ui/core'\nimport { ExpandMore } from '@material-ui/icons'\nimport { makeStyles } from '@material-ui/styles'\nimport { Delete, Edit, Save, Add } from '@material-ui/icons'\nimport { generateColor, generateChainColor, chainAccordionColor, chainAccordionProgressBarColor, alreadyExists, isValidName } from '../utils'\nimport ChainActivityItemListSelect from './ChainActivityItemListSelect'\nimport ChainActivityItemListEdit from './ChainActivityItemListEdit'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    flexBasis: '50%',\n    flexShrink: 0,\n    alignSelf: 'center'\n  },\n  secondaryHeading: {\n    alignSelf: 'center',\n    marginLeft: 'auto',\n    marginRight: 20\n  },\n  bar: {\n    height: 5,\n    backgroundColor: chainAccordionColor\n  },\n  barPrimary: {\n    backgroundColor: chainAccordionProgressBarColor\n  },\n  accordionDetails: {\n    paddingLeft: 0,\n    paddingRight: 0\n  },\n  addActivityForm: {\n    display: 'flex'\n  }\n}))\n\nconst ChainAccordion = ({ chain, handleDelete, updateSelectedItems, chainsInEdit, setChainsInEdit, deleteActivityInChain, activities, setActivities, addActivityToChain }) => {\n  const classes = useStyles()\n  const [ newActivity, setNewActivity ] = useState('')\n  const [ isOpen, setOpen ] = useState(false)\n  const newActivityAlreadyExists = alreadyExists(newActivity, chain.activities.map(a => a.name))\n  const getAllActivityNames = () => Object.keys(activities).filter(name => name.toLowerCase().includes(newActivity.toLowerCase()))\n  const chainInEdit = (chainName) => chainsInEdit.includes(chainName)\n  const isAllItemsSelected = (activity) => activity.items.every(item => chain.selectedItems.includes(item[0]) )\n\n  const progress = () => {\n    const noOfItems = [ ...new Set(chain.activities.reduce((allItems, activity) => allItems.concat(Object.entries(activity.items).map(([_, value]) => value[0])), [])) ].length\n    return chain.selectedItems.length * 100 / noOfItems\n  }\n\n  const handleClick = (event, activity) => {\n    event.stopPropagation()\n    if (isAllItemsSelected(activity)) {\n      const activityItemNames = activity.items.map(item => item[0])\n      updateSelectedItems(chain.name, chain.selectedItems.filter( item => !activityItemNames.includes(item) ))\n    }\n    else {\n      const newSelectedItems = chain.selectedItems\n      activity.items.forEach(item => {\n        if (!newSelectedItems.includes(item[0])) {\n          chain.selectedItems.push(item[0])\n        }\n      })\n      updateSelectedItems(chain.name, newSelectedItems)\n    }\n  }\n\n  const toggleChainEditMode = (event, chainName) => {\n    event.stopPropagation()\n    if (chainsInEdit.includes(chainName)) {\n      setChainsInEdit(chainsInEdit.filter(chain => chain != chainName))\n    }\n    else {\n      const newChainsInEdit = chainsInEdit.concat(chainName)\n      setChainsInEdit(newChainsInEdit)\n    }\n  }\n\n  const addActivity = (event) => {\n    if (event) event.preventDefault()\n    if (isValidName(newActivity) && !newActivityAlreadyExists) {\n      addActivityToChain(chain.name.trim(), newActivity)\n      setNewActivity('')\n    }\n  }\n\n  const buildActivityAccordions = (activity, i) => {\n    const backgroundColor = generateColor(activity.name, false)\n    const lightBgColor    = generateColor(activity.name, true)\n\n    return (\n      <TableRow\n        hover\n        tabIndex={-1}\n        key={i}\n      >\n        <TableCell>    \n          <Accordion style={{ backgroundColor }}>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography className={classes.heading}>{activity.name}</Typography>\n              <Typography color='textSecondary' className={classes.secondaryHeading}>\n                { activity.items.reduce((accumulator, item) => accumulator + (chain.selectedItems.includes(item[0]) ? 1 : 0), 0) } / { activity.items.length } packed\n              </Typography>\n              {\n                chainInEdit(chain.name)\n                  ?\n                  <IconButton className={classes.iconButton} onClick={() => deleteActivityInChain(chain.name, activity.name)}>\n                    <Delete />\n                  </IconButton>\n                  : \n                  <Checkbox\n                    onClick={(event) => handleClick(event, activity)}\n                    checked={isAllItemsSelected(activity)}\n                  /> \n              }\n            </AccordionSummary>\n            <AccordionDetails style={{ backgroundColor: lightBgColor }} >\n              {\n                chainInEdit(chain.name) \n                  ? <ChainActivityItemListEdit\n                    activity={activity}\n                    activities={activities}\n                    setActivities={setActivities}\n                    selectedItems={chain.selectedItems}\n                    updateSelectedItems={updateSelectedItems}\n                    chainName={chain.name}\n                  />\n                  : <ChainActivityItemListSelect\n                    activity={activity}\n                    chainName={chain.name}\n                    selectedItems={chain.selectedItems}\n                    updateSelectedItems={updateSelectedItems}\n                  />\n              }\n            </AccordionDetails>\n          </Accordion>\n        </TableCell>\n      </TableRow>\n    )\n  }\n    \n  return (\n    <Accordion onChange={() => setOpen(!isOpen)} style={{ background: chainAccordionColor }}>\n      <AccordionSummary style={{ background: generateChainColor(chain.activities) }} expandIcon={<ExpandMore />}>\n        <Typography className={classes.heading}>{chain.name}</Typography>\n        <Typography color='textSecondary' className={classes.secondaryHeading}>\n          { chain.selectedItems.length } / { [ ...new Set(chain.activities.reduce((allItems, activity) => allItems.concat(Object.entries(activity.items).map(([_, value]) => value[0])), [])) ].length } packed\n        </Typography>\n        \n        {\n          chainInEdit(chain.name)\n            ?\n            <>\n              <IconButton className={classes.iconButton} onClick={handleDelete}>\n                <Delete />\n              </IconButton>\n              <IconButton className={classes.iconButton} onClick={(event) => toggleChainEditMode(event, chain.name)}>\n                <Save />\n              </IconButton>\n            </>\n            :\n            <IconButton className={classes.iconButton} onClick={(event) => toggleChainEditMode(event, chain.name)}>\n              <Edit />\n            </IconButton>\n        }\n      </AccordionSummary>\n\n      <LinearProgress className={classes.bar} classes={{ barColorPrimary: classes.barPrimary }} variant=\"determinate\" value={progress()} />\n      \n      <AccordionDetails className={classes.accordionDetails}>\n        <Table size=\"small\">\n          {\n            chain.activities.length\n              ? <TableBody>{chain.activities.map(buildActivityAccordions)}</TableBody>\n              : <p>Nothing here. This chain is empty.</p>\n          }\n          {\n            chainInEdit(chain.name) &&\n            <TableRow>\n              <TableCell colSpan={3}>\n                <form onSubmit={addActivity} className={classes.addActivityForm}>\n                  <Autocomplete\n                    style={{ width: '95%' }}\n                    freeSolo\n                    value={newActivity}\n                    options={getAllActivityNames()}\n                    onInputChange={ (e, value) => setNewActivity(value) }\n                    ListboxProps={{ style: { position: 'absolute', backgroundColor: '#fafafa', width: '100%' } }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        fullWidth \n                        placeholder='Add a new activity...' \n                        error={newActivityAlreadyExists}\n                        helperText={newActivityAlreadyExists ? 'Activity is already in the chain!' : ''}\n                      />\n                    )}\n                  />\n                  <IconButton onClick={() => addActivity()}>\n                    <Add />\n                  </IconButton>\n                </form>\n              </TableCell>\n            </TableRow>\n          }\n        </Table>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n\nexport default ChainAccordion","import React, { useRef } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\n\nconst type = 'movableitem'\n\nconst MovableItem = ({ contentItem, index, moveItem, dragAllowed }) => {\n  const ref = useRef(null) // initialize the reference\n\n  const [, drop] = useDrop({\n    accept: type,\n    hover(item) {\n      if (!ref.current) {\n        return\n      }\n      const dragIndex = item.index\n      const hoverIndex = index\n\n      if (dragIndex === hoverIndex) {\n        return\n      }\n\n      moveItem(dragIndex, hoverIndex)\n\n      item.index = hoverIndex\n    }\n  })\n\n  const [{ isDragging }, drag] = useDrag({\n    type: type,\n    item: { id: contentItem.id, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    }),\n    canDrag: dragAllowed\n  })\n\n  drag(drop(ref))\n\n  const opacity = isDragging ? 0.2 : 1\n  const marginTop = 10\n\n  return (\n    <div ref={ref} className={'movable item'} style={{ opacity, marginTop }}>\n      {contentItem}\n    </div>\n  )\n}\n\nconst MovableItemList = ({ items, moveItem, dragAllowed }) => {\n\n  const buildMovableItem = (item, index) => {\n    return (\n      <MovableItem\n        contentItem={item}\n        index={index}\n        key={`${item.props.id}-movable-item`}\n        moveItem={moveItem}\n        dragAllowed={dragAllowed}\n      >\n      </MovableItem>\n    )\n  }\n\n  return <section> {items.map(buildMovableItem)}</section>\n  \n}\n\nexport default MovableItemList","import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport ChainAccordion from '../components/ChainAccordion'\nimport MovableItemList from '../components/MovableItemList'\nimport update from 'immutability-helper'\nimport {\n  IconButton,\n  Typography\n} from '@material-ui/core'\nimport { ToggleOff, ToggleOn } from '@material-ui/icons'\nimport { getCachedActivities, getCachedChains } from '../utils'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n  },\n  orderBar: {\n    marginLeft: 'auto'\n  },\n  heading: {\n    flexBasis: '80%',\n    flexShrink: 0,\n  }\n}))\n\nconst buildChainAccordions = ( chains, activities, setActivities, deleteChain, updateSelectedItems, chainsInEdit, setChainsInEdit, deleteActivityInChain, addActivityToChain ) => {\n\n  const chainsO = chains\n    .map(([chainName, data]) => {\n      return {\n        name: chainName,\n        activities: data.activities.map(activity => {\n          return {\n            name: activity,\n            items: Object.entries(activities[activity].items)\n          }\n        }),\n        selectedItems: data.selectedItems\n      }\n    })\n\n  return (\n    chainsO\n      .map((chain, i) => {\n        return (\n          <ChainAccordion \n            key={`${chain.name}-chainaccordion`}\n            id={chain.name}\n            chain={chain}\n            handleDelete={() => deleteChain(chain.name)}\n            updateSelectedItems={updateSelectedItems}\n            chainsInEdit={chainsInEdit}\n            setChainsInEdit={setChainsInEdit}\n            deleteActivityInChain={deleteActivityInChain}\n            activities={activities}\n            setActivities={setActivities}\n            addActivityToChain={addActivityToChain}\n          />\n        )\n      })\n  )\n}\n\nconst Chains = () => {\n  const classes = useStyles()\n  const [ chains, setChains ] = useState(getCachedChains())\n  const [ activities, setActivities ] = useState(getCachedActivities())\n  const [ chainsInEdit, setChainsInEdit ] = useState([])\n  const [ dragAllowed, setDragAllowed ] = useState(false)\n   \n  useEffect(() => {\n    window.localStorage.setItem('cachedActivities', JSON.stringify(activities))\n  }, [ activities ])\n\n  useEffect(() => {\n    window.localStorage.setItem('cachedChains', JSON.stringify(Object.fromEntries(chains)))\n  }, [ chains ])\n\n  const moveChain = (dragIndex, hoverIndex) => {\n    const draggedChain = chains[dragIndex]\n    setChains(\n      update(chains, {\n        $splice: [[dragIndex, 1], [hoverIndex, 0, draggedChain]]\n      })\n    )\n  }\n\n  const deleteChain = (chainName) => {\n    if (chainName) {\n      setChains(chains.filter(([name, _]) => name != chainName))\n      if (chainsInEdit.includes(chainName)) {\n        setChainsInEdit(chainsInEdit.filter(chain => chain !== chainName))\n      }\n    }\n  }\n\n  const updateSelectedItems = (chainName, selectedItems) => {\n    const newChains = Object.fromEntries(chains)\n    newChains[chainName].selectedItems = selectedItems\n    setChains(Object.entries(newChains))\n  }\n\n  const deleteActivityInChain = (chainName, deletedActivity) => {\n    const newChains = Object.fromEntries(chains)\n    newChains[chainName].activities = newChains[chainName].activities.filter(activity => activity !== deletedActivity)\n    setChains(Object.entries(newChains))\n  }\n\n  const addActivityToChain = (chainName, activityName) => {\n    const addedActivity = activities[activityName]\n\n    // create activity if not exists\n    if (!addedActivity) {\n      const newActivities = { ...activities }\n      newActivities[activityName] = {\n        items: {},\n        pinned: true\n      }\n      setActivities(newActivities)\n    }\n\n    // add activity to chain\n    const newChains = Object.fromEntries(chains)\n    newChains[chainName].activities.push(activityName)\n    setChains(Object.entries(newChains))\n  }\n  \n  const toggleDragAllowed = () => {\n    setDragAllowed(!dragAllowed)\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" className={classes.heading} >\n        Your chains\n      </Typography>\n      <div className={classes.orderBar}>\n      \n        {\n          dragAllowed \n            ?\n            <IconButton onClick={toggleDragAllowed}>\n              <ToggleOn fontSize='large' color=\"primary\"/> reorder on\n            </IconButton>\n            :\n            <IconButton onClick={toggleDragAllowed}>\n              <ToggleOff fontSize='large' /> reorder off\n            </IconButton>\n        }\n        \n      </div>\n      \n      {\n        !chains.length\n          ? <Typography> You have no chains yet. You can create chains in create page </Typography> \n          : <MovableItemList items={buildChainAccordions(chains, activities, setActivities, deleteChain, updateSelectedItems, chainsInEdit, setChainsInEdit, deleteActivityInChain, addActivityToChain )} moveItem={moveChain} dragAllowed={dragAllowed} />\n      }\n\n      \n    </div>\n  )\n}\n\nexport default Chains","import React from 'react'\nimport { Route, HashRouter } from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Container\n} from '@material-ui/core'\n\nimport CreateChains from './pages/CreateChains'\nimport Settings from './pages/Settings'\nimport Chains from './pages/Chains'\nimport WelcomeDialog from './components/WelcomeDialog'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { isTouchDevice } from './utils'\nimport { TouchBackend } from 'react-dnd-touch-backend'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n  }\n}))\n\nconst backendForDND = isTouchDevice() ? TouchBackend : HTML5Backend\n\nconst App = () => {\n  const classes = useStyles()\n  \n  return (\n    <div className={classes.root}>\n      <HashRouter>\n        <Container>\n          <Header />\n          <WelcomeDialog />\n          <DndProvider backend={backendForDND}>\n            <Route exact path=\"/\" component={Chains}/>\n            <Route path=\"/create-chains\" component={CreateChains}/>\n            <Route path=\"/settings\" component={Settings}/>\n          </DndProvider>      \n          <Footer />\n        </Container>\n      </HashRouter>  \n    </div>\n  )\n\n}\n\nexport default App\n","import { createMuiTheme, ThemeProvider } from '@material-ui/core'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        borderBottom: 'none'\n      }\n    }\n  },\n  props: {\n    MuiIconButton: {\n      size: 'small'\n    }\n  },\n  typography: {\n    fontFamily: 'Solway'\n  },\n  palette: {\n    secondary: {\n      main: '#555'\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}